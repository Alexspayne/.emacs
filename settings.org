* Sections
#+TODO: REVIEW | DONE
:PROPERTIES:
:VISIBILITY: children
:END:      

** MELPA and other repositories
#+BEGIN_SRC emacs-lisp
;; Emacs lisp files
(add-to-list 'load-path "~/.emacs.d/elisp/")

(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
;(add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/") t)

(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)
#+END_SRC

#+RESULTS:
: t
** Use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure t)
(setq use-package-verbose t)

(require 'use-package)
#+END_SRC

** Babel
[[http://stackoverflow.com/questions/5902847/how-do-i-apply-or-to-a-list-in-elisp][Here is the stack answer about using the 'some' function.]]
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  (not (or
	(member lang '("python"))
	(member lang '("emacs-lisp"))
	(member lang '("C++"))
	))

  )

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
;(require 'flycheck-pyflakes)
;(add-hook 'python-mode-hook 'flycheck-mode)

;(add-to-list 'flycheck-disabled-checkers 'python-flake8)
;(add-to-list 'flycheck-disabled-checkers 'python-pylint)
;I had to reinstall concurrent to get this to work.
;(use-package jedi
;:ensure t
;:init
;(add-hook 'python-mode-hook 'jedi:setup)
;(add-hook 'python-mode-hook 'jedi:ac-setup))

; Enable execution of code blocks.
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((python . t)))

(add-hook 'python-mode-hook 'linum-mode)

(setq python-indent-offset 4)

(add-to-list 'org-structure-template-alist '("p" "#+BEGIN_SRC python :results output\n?\n#+END_SRC" "<src lang=\"python\">\n\n</src>"))

;path for virtual environments.
;; (add-dir-local-variable $WORKON_HOME 'C:\Users\PayneFamily\Dropbox\Python\envs')

;(require 'virtualenvwrapper)
;(venv-initialize-interactive-shells) ;; if you want interactive shell support
;(venv-initialize-eshell) ;; if you want eshell support
;; note that setting `venv-location` is not necessary if you
;; use the default location (`~/.virtualenvs`), or if the
;; the environment variable `WORKON_HOME` points to the right place
#+END_SRC

#+BEGIN_SRC python :results output
print "It works!!!" + "YAY" ' ... still works'
#+END_SRC

#+RESULTS:
: It works!!!YAY ... still works

** Work Commands
#+BEGIN_SRC emacs-lisp
; Nobody here but us parens.
#+END_SRC
** Regex 
https://tuhdo.github.io/c-ide.html
#+BEGIN_SRC emacs-lisp
;; if the files are not already in the load path
;; (add-to-list 'load-path "folder-to/visual-regexp/")
;; (add-to-list 'load-path "folder-to/visual-regexp-steroids/")
(use-package visual-regexp-steroids)
(require 'visual-regexp-steroids)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
;; if you use multiple-cursors, this is for you:
(define-key global-map (kbd "C-c m") 'vr/mc-mark)
;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
(define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
(define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s
#+END_SRC

#+RESULTS:
: vr/isearch-forward

** Use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure t)
(setq use-package-verbose t)

(require 'use-package)
#+END_SRC
** Winner-mode!
This keeps undo history for window layouts.
It will be useful if for some reason a package removes windows.
C-c <left> undo
C-c <right redo
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Robot Mode
#+BEGIN_SRC emacs-lisp
<<<<<<< HEAD
=======
; If I want a robot-mode, I'll have to write it myself.  This one isn't very good.
; Also... I'd probably want to write it for Atom or VS Code.  Well there are already good robot mode for those.
; I could hack them to make them better though.
>>>>>>> a020f7d927b0a671a70ce3b1b73d22c87aa7526d
;(load-file "~/.emacs.d/robot-mode-master/robot-mode.el")
;(add-to-list 'auto-mode-alist '("\\.robot\\'" . robot-mode))

;; Shortut for making allignment look good.  Doesn't work very well.
(global-set-key (kbd "C-c a") (align-regexp (point-min) (point-max) "^\w.*[[:space:]]\{2,\}"))

#+END_SRC
** GUI stuff
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'tooltip-mode) (tooltip-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

; Not sure what this does.
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (add-hook 'window-setup-hook 'toggle-frame-maximized t))
#+END_SRC
** Navigation
*** Custom Navigation
I borrowed these from someone else.
#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)
<<<<<<< HEAD

(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

*** Personal Shortcuts
**** Shortcut to place timestamp
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t")
		(lambda () (interactive) (org-time-stamp "HH:MM")))
#+END_SRC

**** Shortcuts to org files
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c p")
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/Ob.org")))
(global-set-key (kbd "C-c d") ; d for Daily
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/DailyGoalSetting.org")))
(global-set-key (kbd "C-c e") ; e for Employment
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/Work.org")))
(global-set-key (kbd "C-c w") ; w for What a ton of fun!  Personal Projects
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/Projects.org")))
;; Open this config file
(global-set-key (kbd "C-c s") ; s for Settings
		(lambda () (interactive) (find-file "~/.emacs.d/settings.org")))
#+END_SRC

=======

(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

*** Personal Shortcuts
**** Shortcut to place timestamp
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t")
		(lambda () (interactive) (org-time-stamp "HH:MM")))
#+END_SRC

**** Shortcuts to org files
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c p")
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/Ob.org")))
(global-set-key (kbd "C-c d") ; d for Daily
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/DailyGoalSetting.org")))
(global-set-key (kbd "C-c e") ; e for Employment
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/Work.org")))
(global-set-key (kbd "C-c w") ; w for What a ton of fun!  Personal Projects
		(lambda () (interactive) (find-file "~/Dropbox/WebDev/Projects.org")))
;; Open this config file
(global-set-key (kbd "C-c s") ; s for Settings
		(lambda () (interactive) (find-file "~/.emacs.d/settings.org")))
#+END_SRC

>>>>>>> a020f7d927b0a671a70ce3b1b73d22c87aa7526d
*** Windows
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)

;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

**** Split windows and switch at the same time
From Daniel Mai https://github.com/danielmai/.emacs.d/blob/master/config.org
#+BEGIN_SRC emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC

**** Resizing windows
This is cool!  
I never knew this was here.
#+BEGIN_SRC emacs-lisp
(use-package hydra)
(defhydra hydra-resize (global-map "<f2>")
  "resizing hydra"
  ("<left>" shrink-window-horizontally "shrink horizontal")
  ("<right>" enlarge-window-horizontally "enlarge horizontal")
  ("<down>" shrink-window "shrink")
  ("<up>" enlarge-window "shrink")
  )
#+END_SRC

** Key-chord
#+BEGIN_SRC emacs-lisp
(defun es/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(use-package key-chord
  :init
  (progn
    (key-chord-mode 1)
;; Someday I'll look into what these other ones are and try them out.
;    (key-chord-define-global ";f" 'flip-frame)
;    (key-chord-define-global ";t" 'elpy-test-pytest-runner)
;    (key-chord-define-global "jj" 'helm-projectile-find-file)
;    (key-chord-define-global "JJ" 'helm-projectile-find-file-in-known-projects)
    (key-chord-define-global "BB" 'my/switch-to-previous-buffer)
;    (key-chord-define-global "\\\\" 'es/helm-mini-or-projectile-find-file)
;    (key-chord-define-global "MM" 'hydra-modes/body)
    ;; (key-chord-define-global "FF" 'delete-other-windows) 
;    (key-chord-define-global "GG" 'magit-status)
    ;; (key-chord-define-global "SS" 'helm-swoop-back-to-last-point) ;;I type SS too much.
    ;; (key-chord-define-global "DD" 'dired-jump)

    )
  )
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(use-package atom-one-dark-theme
  :disabled t
  :init
  (load-theme 'atom-one-dark t)
  )

(use-package aurora-theme
  :disabled t
  :init
  (load-theme 'aurora t)
  )

(use-package monokai-theme
  :init
  (load-theme 'monokai t)
  )

(use-package base16-theme
  :init
  :disabled t
  (load-theme 'base16-oceanicnext-dark t)
  )

(defun es/enable-misterioso ()
  "Load misterioso theme, but fix annoying highlighting"
  (load-theme 'misterioso t)
  (set-face-attribute 'hl-line nil
              :inherit nil
              :background "gray13"))

;; (es/enable-misterioso)

;; THEME switching stuff from Daniel Mai
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "C-`" 'switch-theme)
#+END_SRC

** REVIEW Helm-ag
Still don't know what this does.
TODO: Make it so helm doesn't take over th
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :defer t
  :config
  (setq helm-ag-insert-at-point 'symbol)
  )
#+END_SRC

#+RESULTS:
** REVIEW Helm 
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    ;;(require 'helm-config)
    (helm-mode 1)
    (setq helm-recentf-fuzzy-match t
      helm-buffers-fuzzy-matching t
      helm-completion-in-region-fuzzy-match t
      helm-mode-fuzzy-match t
      helm-recentf-fuzzy-match t
      helm-M-x-fuzzy-match t)
    (add-to-list 'helm-completing-read-handlers-alist '(find-file . helm-completing-read-symbols))
    (setq helm-source-recentf
      (helm-make-source "Recentf" 'helm-recentf-source
        :fuzzy-match t))
    :bind (("C-x b" . helm-mini)
           ("C-x f" . helm-recentf)
       ("C-s" . helm-occur)
       ("M-x" .  helm-M-x)
           ("M-y" . helm-show-kill-ring)))

(define-key helm-map
  (kbd "<down-mouse-2>") 'mouse-yank-primary)

(define-key helm-map
  (kbd "<drag-mouse-2>") 'ignore)

(defun es/helm-mini-or-projectile-find-file ()
  (interactive)
  (if (helm-alive-p)
      (helm-run-after-exit #'helm-projectile-find-file)
    (helm-mini)))
#+END_SRC
** REVIEW Org

*** General settings
http://stackoverflow.com/questions/7174819/export-effort-and-clocksum-from-org-mode
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
(setq org-hide-leading-stars t)

; http://stackoverflow.com/questions/7174819/export-effort-and-clocksum-from-org-mode
(setq org-export-with-drawers t)
(setq org-export-with-properties t)
(setq org-export-with-priority t)
(setq org-export-with-toc nil)
(setq org-export-with-section-numbers 1)
;; (defun jbd-org-export-format-drawer (name content)
;;   "Export drawers to drawer HTML class."
;;   (setq content (org-remove-indentation content))
;;   (format "@<div class=\"drawer\">%s@</div>\n" content))

(add-hook 'org-mode-hook 'org-indent-mode)

;; (setq org-export-format-drawer-function 'jbd-org-export-format-drawer)

;;I use visual line mode in org mode because I do so much writing in my org files.
(add-hook 'org-mode-hook 'visual-line-mode)
;; Open .org and .txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))


(add-hook 'org-agenda-finalize-hook
      (lambda () (remove-text-properties
         (point-min) (point-max) '(mouse-face t))))
#+END_SRC

*** Clock
#+BEGIN_SRC emacs-lisp
; This is supposed to include the current open clock in reports.
; It presently isn't working like I expect.  I don't see it doing anything.
(setq org-clock-report-include-clocking-task 1)

; I was using this. I think it was useful but I'm not sure what it does exactly.
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

;; I like to see the total hours in my clocks instead of cumulative days.
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'corgi-org-agenda)

  ;; bindings for capture templates
  (define-key global-map "\C-ci" ;inbox
    (lambda () (interactive) (org-capture nil "i")))
  (define-key global-map "\C-cnn" ;new note
    (lambda () (interactive) (org-capture nil "n")))

  ;; allow comment region in the code edit buffer (according to language)
  (defun my-org-comment-dwim (&optional arg)
    (interactive "P")
    (or (org-babel-do-key-sequence-in-edit-buffer (kbd "M-;"))
	(comment-dwim arg)))

  (define-key org-mode-map
    (kbd "M-;") 'my-org-comment-dwim)	
#+END_SRC

#+RESULTS:
: my-org-comment-dwim
*** Speed Commands and Highlights
#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
;; volatile highlights - temporarily highlight changes from pasting etc
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC

*** TODOs
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)

;; Set to 'invisible and blocked tasks wont show up in agenda, t and they will be dimmed
(setq org-agenda-dim-blocked-tasks 'invisible)

;; Don't keep track of completed repeating tasks
(setq org-log-repeat nil)
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
;; Enable highlight line only for org-agenda-mode (it is annoying in other modes)
(add-hook 'org-agenda-mode-hook 'hl-line-mode)

;; Make agenda full screen without typing 'o'
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))

(defun es/skip-unless-work ()
  "Skip trees that are not waiting"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (re-search-forward ":work:" subtree-end t)
    nil ; tag found, do not skip
      subtree-end))) ; tag not found, continue after end of subtree

;; Block agenda view for agenda and unscheduled tasks
(setq org-agenda-custom-commands
      '(("j" "Agenda and unscheduled tasks"
     ((tags-todo
       "-DEADLINE={.+}-SCHEDULED={.+}-dad-mom-beilei-someday-emacs-projects-work")
      (agenda ""))
     ((org-agenda-start-on-weekday nil)
      (org-agenda-ndays 2)
      (org-deadline-warning-days 0)))
    ("w" "Work tasks"
     ((tags-todo
       "-DEADLINE={.+}-SCHEDULED={.+}-dad-mom-beilei-someday-emacs-projects")
      (agenda ""))
     ((org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp ":home:"))
      (org-agenda-start-on-weekday nil)
      (org-agenda-ndays 1)
      (org-deadline-warning-days 0)))
    ("f" "Talking points"
         ((tags-todo "+beilei")
          (tags-todo "+mom")
          (tags-todo "+dad"))
     ((org-agenda-prefix-format "- ")
      (org-show-context-detail 'minimal)
      (org-agenda-todo-keyword-format "")))
    (";" "Someday and projects"
     ((tags-todo "+someday"))
     ((org-agenda-prefix-format "- ")
      (org-show-context-detail 'minimal)
      (org-agenda-remove-tags t)
      (org-agenda-todo-keyword-format "")))
    ("l" "Emacs"
     ((tags-todo "+emacs"))
     ((org-agenda-prefix-format "- ")
      (org-show-context-detail 'minimal)
      (org-agenda-remove-tags t)
      (org-agenda-todo-keyword-format "")))
    ("2" "Mobile tasks"
     ((tags "-DEADLINE={.+}-SCHEDULED={.+}/+TODO")
      (agenda ""))
     ((org-agenda-prefix-format "- ")
      (org-agenda-todo-keyword-format "")
      (org-agenda-start-on-weekday nil)
      (org-agenda-ndays 3)
      (org-deadline-warning-days 0))
         ("~/Dropbox/org_files/taskpaper_files/da_guai.taskpaper"))))

  (setq org-agenda-files '("~/Dropbox/org_files/da_guai.org"))

  ;; Only ask for confirmation of kills within agenda
  ;; only if TODO spans more than 2 lines
  (setq org-agenda-confirm-kill 2)

  (setq org-deadline-warning-days 3)
#+END_SRC

*** Capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    '(("i" "New TODO to Uncategorized TODOs" entry (file+headline
      "~/Dropbox/org_files/da_guai.org" "Uncategorized TODOs")
      "* TODO %?" :kill-buffer t)

    ("n" "New note to xnotes.org" entry (file
     "~/Dropbox/org_files/xnotes.org")
     "* %T\n\n%i%?" :prepend t :empty-lines 1)

    ("w" "New work note" entry (file
      "~/Dropbox/org_files/worknotes.org")
      "* %T\n\n%i%?" :kill-buffer t :prepend t :empty-lines 1)

    ("d" "New daydayup entry" entry (file
      "~/Dropbox/org_files/daydayup.org")
      "* %T\n\n%?" :kill-buffer t :prepend t :empty-lines 1)))
#+END_SRC
*** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:init
(setq org-bullets-bullet-list
'("◉" "◎" "⚫" "○" "►" "◇"))
:config
(setcdr org-bullets-bullet-map nil)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
#+END_SRC

*** make things look nice
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
#+END_SRC
** REVIEW Company
#+BEGIN_SRC emacs-lisp
(use-package company)
(require 'company)
; Eh...
;(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
** C++
https://www.youtube.com/watch?v=r_HW0EB67eY
*** Fly-Make for linting (Google style)
#+BEGIN_SRC emacs-lisp
(use-package flymake-google-cpplint)
(defun my:flymake-google-init ()
  (require 'flymake-google-cpplint)
  (custom-set-variables
   '(flymake-google-cpplint-command "cpplint"))
  (flymake-google-cpplint-load)
)
(add-hook 'c++-mode-hook 'my:flymake-google-init)

; start google-c-style with Emacs
(use-package google-c-style)
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)
#+END_SRC
*** Code completion
#+BEGIN_SRC emacs-lisp
(setq company-backends (delete 'company-semantic company-backends))
(define-key c-mode-map  [(tab)] 'company-complete)
(define-key c++-mode-map  [(tab)] 'company-complete)

;; Using semantic
; I see it adding a pick menu for autocomplete.
; But it isn't using helm.  I think I'm ok with that though. For now.

(use-package cc-mode)
(use-package semantic)
(require 'cc-mode)
(require 'semantic)

;These ones don't work on my work computer.
(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(semantic-mode 1)
#+END_SRC
